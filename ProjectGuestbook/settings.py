"""
Django settings for ProjectGuestbook project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import environ
import os
import sys
from pathlib import Path
import logging
import boto3
from botocore.exceptions import NoCredentialsError, PartialCredentialsError, ClientError
from click import password_option
from django.template import Engine

# Set up logging
logger = logging.getLogger(__name__)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Initialize environment variables
env = environ.Env(
    # Set default values and casting
    DEBUG=(bool, False)
)

# Read .env file if it exists
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# Environment-specific settings
ENVIRONMENT = env('ENVIRONMENT', default='Production')
S3_BUCKET = env('S3_BUCKET', default=None)
AZURE_BLOB_STORAGE = env('AZURE_BLOB_STORAGE', default=None)
AWS_AURORA_URL = env('AWS_AURORA_URL', default=None)
AZURE_SQL_URL = env('AZURE_SQL_URL', default=None)

# AWS S3 credentials
AWS_S3_ACCESS_KEY = env('AWS_S3_ACCESS_KEY', default=None)
AWS_S3_SECRET_KEY = env('AWS_S3_SECRET_KEY', default=None)

# Initialize the DATA_STORE variable
DATA_STORE = "Local SQLite (default)"


# Function to check if S3 credentials are valid
def check_s3_credentials():
    try:
        s3_client = boto3.client(
            's3',
            aws_access_key_id=AWS_S3_ACCESS_KEY,
            aws_secret_access_key=AWS_S3_SECRET_KEY,
        )
        # Perform a simple operation to check credentials (like listing the bucket contents)
        s3_client.head_bucket(Bucket=S3_BUCKET)
        logger.info(f"Authenticated with S3 successfully")
        return True
    except (NoCredentialsError, PartialCredentialsError):
        logger.critical("Invalid or missing S3 credentials. The application cannot start.")
        return False
    except ClientError as e:
        error_code = int(e.response['Error']['Code'])
        if error_code == 403:
            logger.critical("S3 credentials are incorrect or access is forbidden. The application cannot start.")
        else:
            logger.critical(f"Failed to connect to the S3 bucket: {e}")
        return False


# Database configuration with priority order
if AWS_AURORA_URL:
    DATABASES = {
        'default': env.db_url('AWS_AURORA_URL')
    }
    DATA_STORE = "AWS RDS (Aurora)"
    print("Using AWS RDS for the database.")
elif AZURE_SQL_URL:
    DATABASES = {
        'default': env.db('AZURE_SQL_URL')
    }
    DATA_STORE = "Azure SQL Database"
    print("Using Azure SQL Database for the database.")
else:
    # If no RDS/Azure SQL, check for cloud storage to save the SQLite database
    default_sqlite_path = BASE_DIR / 'db.sqlite3'

    if S3_BUCKET:
        # Check for required AWS S3 credentials
        if not AWS_S3_ACCESS_KEY or not AWS_S3_SECRET_KEY:
            logger.critical(
                "S3_BUCKET is set, but AWS_S3_ACCESS_KEY and/or AWS_S3_SECRET_KEY are missing. "
                "The application cannot start without these credentials."
            )
            sys.exit(1)  # Exit the application

        # Validate the S3 credentials by checking the connection
        if not check_s3_credentials():
            sys.exit(1)  # Exit if the credentials are invalid

        from storages.backends.s3boto3 import S3Boto3Storage


        class S3DatabaseStorage(S3Boto3Storage):
            location = 'database'


        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': default_sqlite_path,
                'STORAGE': S3DatabaseStorage(),
            }
        }
        DATA_STORE = "SQLite on S3"
        print("Using S3 for SQLite database storage.")
    elif AZURE_BLOB_STORAGE:
        from storages.backends.azure_storage import AzureStorage


        class AzureDatabaseStorage(AzureStorage):
            azure_container = 'database'


        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': default_sqlite_path,
                'STORAGE': AzureDatabaseStorage(),
            }
        }
        DATA_STORE = "SQLite on Azure Blob Storage"
        print("Using Azure Blob Storage for SQLite database storage.")
    else:
        # Default to local SQLite
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': default_sqlite_path,
            }
        }
        DATA_STORE = "Local SQLite"
        print("Using local SQLite database.")

# Print the current data storage
print(f"DATA_STORE is set to: {DATA_STORE}")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

ALLOWED_HOSTS = ["*"]

INTERNAL_IPS = [
    "127.0.0.1",
]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "guestbook.apps.GuestbookConfig",
    "tailwind",
    "theme",
    'django_browser_reload',
    'rest_framework',
]

TAILWIND_APP_NAME = 'theme'

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_browser_reload.middleware.BrowserReloadMiddleware",
]

ROOT_URLCONF = "ProjectGuestbook.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "ProjectGuestbook.wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases


# # S3 Options
# if DATA_STORE == "RDS":
#     DATABASE_ENGINE = "django.db.backends.postgresql_psycopg2"
#     DATABASE_NAME =
#     DATABASE_USER =
#     DATABASE_PASSWORD =
#     DATABASE_PORT =
#     DATABASE_HOST =
# elif DATA_STORE == "AzureSQL":
#     DATABASE_ENGINE = "django.db.backends.postgresql_psycopg2"
#     DATABASE_NAME =
#     DATABASE_USER =
#     DATABASE_PASSWORD =
#     DATABASE_PORT =
#     DATABASE_HOST =
#
# elif DATA_STORE == "S3" or DATA_STORE == "AzureBlob":
#     DATABASE_ENGINE = "django.db.backends.sqlite3"
#     DATABASE_NAME = f"{BASE_DIR} / 'db.sqlite3'"
#



# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
